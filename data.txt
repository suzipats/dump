import org.springframework.beans.factory.support.BeanDefinitionBuilder;
import org.springframework.beans.factory.support.BeanDefinitionRegistry;
import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;
import org.springframework.boot.context.properties.bind.Binder;
import org.springframework.boot.context.properties.bind.Bindable;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;

import javax.sql.DataSource;
import java.util.HashMap;
import java.util.Map;

@Configuration
public class DynamicDataSourceRegistrar implements BeanDefinitionRegistryPostProcessor {

    private final Environment environment;

    public DynamicDataSourceRegistrar(Environment environment) {
        this.environment = environment;
    }

    @Override
    public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {
        Binder binder = Binder.get(environment);
        String PREFIX = "custom.datasources";

        Map<String, Object> raw =
                binder.bind(PREFIX, Bindable.mapOf(String.class, Object.class))
                      .orElseThrow();

        Map<String, DataSource> allDataSources = new HashMap<>();

        for (String key : raw.keySet()) {
            String dsPrefix = PREFIX + "." + key;
            Map<String, String> props = binder.bind(dsPrefix, Bindable.mapOf(String.class, String.class)).orElseThrow();

            String url = props.get("url");
            String username = props.get("username");
            String password = props.get("password");
            String driverClassName = props.get("driver-class-name");
            String type = props.get("type");

            try {
                Class<? extends DataSource> dsType = type != null
                        ? (Class<? extends DataSource>) Class.forName(type)
                        : detectDefaultDataSourceType();

                DataSource ds = DataSourceBuilder.create()
                        .url(url)
                        .username(username)
                        .password(password)
                        .driverClassName(driverClassName)
                        .type(dsType)
                        .build();

                // Bind impl-specific props
                binder.bind(dsPrefix, Bindable.ofInstance(ds));

                String beanName = "dataSource_" + key;

                // Register each datasource bean individually with destroy method
                BeanDefinitionBuilder beanDefBuilder = BeanDefinitionBuilder
                        .genericBeanDefinition(ds.getClass(), () -> ds)
                        .setDestroyMethodName("close");

                registry.registerBeanDefinition(beanName, beanDefBuilder.getBeanDefinition());

                // Put into map
                allDataSources.put(key, ds);

            } catch (Exception e) {
                throw new RuntimeException("Failed to register datasource: " + key, e);
            }
        }

        // Register DataSourceProvider with the Map
        BeanDefinitionBuilder providerBuilder = BeanDefinitionBuilder
                .genericBeanDefinition(DataSourceProvider.class, () -> new DataSourceProvider(allDataSources));

        registry.registerBeanDefinition("dataSourceProvider", providerBuilder.getBeanDefinition());
    }

    @Override
    public void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory ignored) {
        // no-op
    }

    @SuppressWarnings("unchecked")
    private Class<? extends DataSource> detectDefaultDataSourceType() throws ClassNotFoundException {
        try {
            return (Class<? extends DataSource>) Class.forName("com.zaxxer.hikari.HikariDataSource");
        } catch (ClassNotFoundException e) {
            try {
                return (Class<? extends DataSource>) Class.forName("org.apache.tomcat.jdbc.pool.DataSource");
            } catch (ClassNotFoundException ex) {
                return (Class<? extends DataSource>) Class.forName("org.apache.commons.dbcp2.BasicDataSource");
            }
        }
    }
}
