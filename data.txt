package com.example.mqlibrary;

import org.springframework.boot.context.properties.ConfigurationProperties;

@ConfigurationProperties
public class MQProperties {
    private String queueManager;
    private String channel;
    private String connName;
    private String user;
    private String password;

    public String getQueueManager() { return queueManager; }
    public void setQueueManager(String queueManager) { this.queueManager = queueManager; }

    public String getChannel() { return channel; }
    public void setChannel(String channel) { this.channel = channel; }

    public String getConnName() { return connName; }
    public void setConnName(String connName) { this.connName = connName; }

    public String getUser() { return user; }
    public void setUser(String user) { this.user = user; }

    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
}









package com.example.mqlibrary;

import jakarta.jms.*;
import org.springframework.jms.connection.CachingConnectionFactory;
import org.springframework.jms.core.JmsTemplate;
import com.ibm.mq.jms.MQConnectionFactory;
import com.ibm.msg.client.wmq.WMQConstants;

public class MQPublisherComponent {

    private final MQProperties properties;
    private JmsTemplate jmsTemplate;

    public MQPublisherComponent(MQProperties properties) {
        this.properties = properties;
    }

    public void doInitialize() throws JMSException {
        MQConnectionFactory factory = new MQConnectionFactory();
        factory.setQueueManager(properties.getQueueManager());
        factory.setChannel(properties.getChannel());
        factory.setConnectionNameList(properties.getConnName());
        factory.setTransportType(WMQConstants.WMQ_CM_CLIENT);
        factory.setStringProperty(WMQConstants.USERID, properties.getUser());
        factory.setStringProperty(WMQConstants.PASSWORD, properties.getPassword());
        factory.setBooleanProperty(WMQConstants.CLIENT_RECONNECT_OPTIONS, WMQConstants.WMQ_CLIENT_RECONNECT);
        factory.setIntProperty(WMQConstants.CLIENT_RECONNECT_TIMEOUT, 30);

        CachingConnectionFactory cachingFactory = new CachingConnectionFactory(factory);
        this.jmsTemplate = new JmsTemplate(cachingFactory);

        // Validate connection
        try (Connection connection = cachingFactory.createConnection()) {
            connection.start();
            System.out.println("‚úÖ Publisher MQ connection initialized successfully.");
        }
    }

    public void publish(String destination, String message) {
        if (jmsTemplate == null) {
            throw new IllegalStateException("Publisher not initialized. Call doInitialize() first.");
        }
        jmsTemplate.convertAndSend(destination, message);
    }
}










package com.example.mqlibrary;

import jakarta.jms.*;
import com.ibm.mq.jms.MQConnectionFactory;
import com.ibm.msg.client.wmq.WMQConstants;

public class MQSubscriberComponent {

    public interface MessageHandler {
        void handleMessage(String message);
    }

    private final MQProperties properties;
    private final MessageHandler handler;
    private Connection connection;
    private Session session;
    private MessageConsumer consumer;

    public MQSubscriberComponent(MQProperties properties, MessageHandler handler) {
        this.properties = properties;
        this.handler = handler;
    }

    public void doInitialize(String queueName) throws JMSException {
        MQConnectionFactory factory = new MQConnectionFactory();
        factory.setQueueManager(properties.getQueueManager());
        factory.setChannel(properties.getChannel());
        factory.setConnectionNameList(properties.getConnName());
        factory.setTransportType(WMQConstants.WMQ_CM_CLIENT);
        factory.setStringProperty(WMQConstants.USERID, properties.getUser());
        factory.setStringProperty(WMQConstants.PASSWORD, properties.getPassword());
        factory.setBooleanProperty(WMQConstants.CLIENT_RECONNECT_OPTIONS, WMQConstants.WMQ_CLIENT_RECONNECT);
        factory.setIntProperty(WMQConstants.CLIENT_RECONNECT_TIMEOUT, 30);

        connection = factory.createConnection();
        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
        Destination destination = session.createQueue(queueName);
        consumer = session.createConsumer(destination);

        consumer.setMessageListener(message -> {
            if (message instanceof TextMessage) {
                try {
                    String text = ((TextMessage) message).getText();
                    handler.handleMessage(text);
                } catch (JMSException e) {
                    System.err.println("Failed to process incoming message: " + e.getMessage());
                }
            }
        });

        System.out.println("‚úÖ Subscriber MQ connection initialized successfully.");
    }

    public void doStart() throws JMSException {
        if (connection != null) {
            connection.start();
            System.out.println("‚úÖ Subscriber MQ connection started.");
        } else {
            System.err.println("‚ùå Subscriber connection not initialized. Call doInitialize() first.");
        }
    }

    public void shutdown() throws JMSException {
        if (consumer != null) consumer.close();
        if (session != null) session.close();
        if (connection != null) {
            if (connection.isStarted()) {
                connection.stop();
                System.out.println("‚úÖ Subscriber MQ connection stopped.");
            }
            connection.close();
        }
    }
}













package com.example.client.config;

import com.example.mqlibrary.MQProperties;
import com.example.mqlibrary.MQPublisherComponent;
import com.example.mqlibrary.MQSubscriberComponent;
import com.example.mqlibrary.MQSubscriberComponent.MessageHandler;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableConfigurationProperties
public class MQClientConfiguration {

    @Bean(name = "mQPublishProperties")
    @org.springframework.boot.context.properties.ConfigurationProperties(prefix = "pub")
    public MQProperties publisherProperties() {
        return new MQProperties();
    }

    @Bean(name = "mQSubscriberProperties")
    @org.springframework.boot.context.properties.ConfigurationProperties(prefix = "sub")
    public MQProperties subscriberProperties() {
        return new MQProperties();
    }

    @Bean
    public MQPublisherComponent mqPublisherComponent(MQProperties mQPublishProperties) throws Exception {
        MQPublisherComponent publisher = new MQPublisherComponent(mQPublishProperties);
        publisher.doInitialize();
        return publisher;
    }

    @Bean
    public MQSubscriberComponent mqSubscriberComponent(MQProperties mQSubscriberProperties) throws Exception {
        MQSubscriberComponent subscriber = new MQSubscriberComponent(mQSubscriberProperties, new MessageHandler() {
            @Override
            public void handleMessage(String message) {
                System.out.println("üì• Received message: " + message);
            }
        });
        subscriber.doInitialize("MY.SUB.QUEUE");
        return subscriber;
    }
}








package com.example.client.config;

import com.example.mqlibrary.MQProperties;
import com.example.mqlibrary.MQPublisherComponent;
import com.example.mqlibrary.MQSubscriberComponent;
import com.example.mqlibrary.MQSubscriberComponent.MessageHandler;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableConfigurationProperties
public class MQClientConfiguration {

    @Bean(name = "mQPublishProperties")
    @org.springframework.boot.context.properties.ConfigurationProperties(prefix = "pub")
    public MQProperties publisherProperties() {
        return new MQProperties();
    }

    @Bean(name = "mQSubscriberProperties")
    @org.springframework.boot.context.properties.ConfigurationProperties(prefix = "sub")
    public MQProperties subscriberProperties() {
        return new MQProperties();
    }

    @Bean
    public MQPublisherComponent mqPublisherComponent(MQProperties mQPublishProperties) throws Exception {
        MQPublisherComponent publisher = new MQPublisherComponent(mQPublishProperties);
        publisher.doInitialize();
        return publisher;
    }

    @Bean
    public MQSubscriberComponent mqSubscriberComponent(MQProperties mQSubscriberProperties) throws Exception {
        MQSubscriberComponent subscriber = new MQSubscriberComponent(mQSubscriberProperties, new MessageHandler() {
            @Override
            public void handleMessage(String message) {
                System.out.println("üì• Received message: " + message);
            }
        });
        subscriber.doInitialize("MY.SUB.QUEUE");
        return subscriber;
    }
}




        MQMessageMetadata metadata = new MQMessageMetadata();
        metadata.setMessageId(message.getJMSMessageID());
        metadata.setCorrelationId(message.getJMSCorrelationID());
        metadata.setDestination(message.getJMSDestination());
        metadata.setTimestamp(message.getJMSTimestamp());
        metadata.setRedelivered(message.getJMSRedelivered());


        Enumeration<?> propertyNames = message.getPropertyNames();
        while (propertyNames.hasMoreElements()) {
            String name = (String) propertyNames.nextElement();
            Object value = message.getObjectProperty(name);
            metadata.getCustomProperties().put(name, value);
        }

        System.out.println("üìÑ Metadata: " + metadata);



 long length = bytesMessage.getBodyLength();
    if (length > Integer.MAX_VALUE) {
        throw new IllegalStateException("Message too large to handle as byte[]");
    }

    byte[] data = new byte[(int) length];
    bytesMessage.readBytes(data);
    
    // Now `data` holds the message payload
    System.out.println("üì¶ Received binary message, size = " + data.length + " bytes");



